package vista;

import conexion.Conexion;
import controlador.Ctrl_RegistrarVenta;
import controlador.VentaPDF;
import java.awt.Dimension;
import static java.awt.image.ImageObserver.WIDTH;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.CabeceraVenta;
import modelo.DetalleVenta;

/**
 *
 * @author andre
 */
public class InterFacturacion extends javax.swing.JInternalFrame {

    private DefaultTableModel modeloDatosProductos;
    //Lista detalle de venta de los productos
    ArrayList<DetalleVenta> listaProductos = new ArrayList<>();
    private DetalleVenta producto;
    private int idCliente = 0; //ID del cliente seleccionado
    private int idProducto = 0;
    private String nombre = "";
    private int cantidadProducto = 0;
    private double precioUnitario = 0.0;
    private int porcentajeIva = 0;
    private int cantidad = 0; //Cantidad de productos a comprar
    private double subtotal = 0.0; //Cantidad por precio
    private double descuento = 0.0;
    private double iva = 0.0;
    private double totalPagar = 0.0;
    private double subtotalGeneral = 0.0;
    private double descuentoGeneral = 0.0;
    private double ivaGeneral = 0.0;
    private double totalpagarGeneral = 0.0;
    private int auxIdDetalle = 1; //ID detalle de la venta

    public InterFacturacion() {
        initComponents();
        this.setSize(new Dimension(800, 600));
        this.setTitle("Facturacion");

        //Cagar Clientes en la vista
        this.CargarClientes();
        this.CargarProductos();
        this.iniciarTablaProductos();

        txtEfectivo.setEnabled(false);
        btnCalcular.setEnabled(false);
        txtSubTotal.setText("0.0");
        txtIva.setText("0.0");
        txtDescuento.setText("0.0");
        txtTotalPagar.setText("0.0");

        //Insertar imagen label
        ImageIcon wallpaper = new ImageIcon("src/img/fondo3.png");
        Icon icono = new ImageIcon(wallpaper.getImage().getScaledInstance(800, 600, WIDTH));
        Label_wallpaper.setIcon(icono);
        this.repaint();
    }

    //Metodo iniciar tabla productos
    private void iniciarTablaProductos() {
        modeloDatosProductos = new DefaultTableModel();
        //Añadir columnas
        modeloDatosProductos.addColumn("N°");
        modeloDatosProductos.addColumn("Nombre");
        modeloDatosProductos.addColumn("Cantidad");
        modeloDatosProductos.addColumn("P. Unitario");
        modeloDatosProductos.addColumn("Subtotal");
        modeloDatosProductos.addColumn("Descuento");
        modeloDatosProductos.addColumn("Iva");
        modeloDatosProductos.addColumn("Total Pagar");
        modeloDatosProductos.addColumn("Acción");

        //Agregar datos del modelo a la tabla
        this.tableProductos.setModel(modeloDatosProductos);
    }

    //Metodo para presentar informacion de la tabla detalle venta
    private void listaTablaProductos() {
        this.modeloDatosProductos.setRowCount(listaProductos.size());
        for (int i = 0; i < listaProductos.size(); i++) {
            this.modeloDatosProductos.setValueAt(i + 1, i, 0);
            this.modeloDatosProductos.setValueAt(listaProductos.get(i).getNombre(), i, 1);
            this.modeloDatosProductos.setValueAt(listaProductos.get(i).getCantidad(), i, 2);
            this.modeloDatosProductos.setValueAt(listaProductos.get(i).getPrecioUnitario(), i, 3);
            this.modeloDatosProductos.setValueAt(listaProductos.get(i).getSubTotal(), i, 4);
            this.modeloDatosProductos.setValueAt(listaProductos.get(i).getDescuento(), i, 5);
            this.modeloDatosProductos.setValueAt(listaProductos.get(i).getIva(), i, 6);
            this.modeloDatosProductos.setValueAt(listaProductos.get(i).getTotalPagar(), i, 7);
            this.modeloDatosProductos.setValueAt("Eliminar", i, 8);
        }
        //Añadir al table
        tableProductos.setModel(modeloDatosProductos);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        BoxCliente = new javax.swing.JComboBox<>();
        BoxProducto = new javax.swing.JComboBox<>();
        txtClienteBuscar = new javax.swing.JTextField();
        txtCantidad = new javax.swing.JTextField();
        btnBuscarCliente = new javax.swing.JButton();
        btnAñadirProducto = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableProductos = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtSubTotal = new javax.swing.JTextField();
        txtDescuento = new javax.swing.JTextField();
        txtIva = new javax.swing.JTextField();
        txtTotalPagar = new javax.swing.JTextField();
        txtEfectivo = new javax.swing.JTextField();
        txtCambio = new javax.swing.JTextField();
        btnCalcular = new javax.swing.JButton();
        btnRegistrarVenta = new javax.swing.JButton();
        Label_wallpaper = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Facturación");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 0, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Cliente:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 80, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Producto:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 80, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Cantidad:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 80, 80, -1));

        BoxCliente.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        BoxCliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Cliente:", "Item 2", "Item 3", "Item 4" }));
        getContentPane().add(BoxCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 40, 170, -1));

        BoxProducto.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        BoxProducto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Producto:", "Item 2", "Item 3", "Item 4" }));
        getContentPane().add(BoxProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 80, 170, -1));

        txtClienteBuscar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        getContentPane().add(txtClienteBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 40, 150, -1));

        txtCantidad.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        getContentPane().add(txtCantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 80, 60, -1));

        btnBuscarCliente.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnBuscarCliente.setText("Buscar");
        btnBuscarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarClienteActionPerformed(evt);
            }
        });
        getContentPane().add(btnBuscarCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 40, 80, -1));

        btnAñadirProducto.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnAñadirProducto.setText("Añadir Productos");
        btnAñadirProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAñadirProductoActionPerformed(evt);
            }
        });
        getContentPane().add(btnAñadirProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 80, 140, -1));

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tableProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableProductos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableProductosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableProductos);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 740, 190));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 760, 210));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("Subtotal:");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("Descuento:");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, -1, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setText("IVA:");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, -1, -1));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("Total a pagar:");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, -1, -1));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setText("Efectivo:");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, -1, -1));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel10.setText("Cambio:");
        jPanel2.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 180, -1, -1));

        txtSubTotal.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtSubTotal.setEnabled(false);
        jPanel2.add(txtSubTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 20, 120, -1));

        txtDescuento.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtDescuento.setEnabled(false);
        jPanel2.add(txtDescuento, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 50, 120, -1));

        txtIva.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtIva.setEnabled(false);
        jPanel2.add(txtIva, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 80, 120, -1));

        txtTotalPagar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtTotalPagar.setEnabled(false);
        jPanel2.add(txtTotalPagar, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 110, 120, -1));

        txtEfectivo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jPanel2.add(txtEfectivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 148, 120, -1));

        txtCambio.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtCambio.setEnabled(false);
        jPanel2.add(txtCambio, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 180, 120, -1));

        btnCalcular.setBackground(new java.awt.Color(51, 255, 255));
        btnCalcular.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnCalcular.setText("Calcular Cambio");
        btnCalcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcularActionPerformed(evt);
            }
        });
        jPanel2.add(btnCalcular, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 150, 130, 50));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 330, 380, 210));

        btnRegistrarVenta.setBackground(new java.awt.Color(51, 255, 255));
        btnRegistrarVenta.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnRegistrarVenta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/impresora.png"))); // NOI18N
        btnRegistrarVenta.setText("Registrar Venta");
        btnRegistrarVenta.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnRegistrarVenta.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnRegistrarVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarVentaActionPerformed(evt);
            }
        });
        getContentPane().add(btnRegistrarVenta, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 350, 170, 100));
        getContentPane().add(Label_wallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 790, 570));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRegistrarVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarVentaActionPerformed
        CabeceraVenta cabeceraVenta = new CabeceraVenta();
        DetalleVenta detalleventa = new DetalleVenta();
        Ctrl_RegistrarVenta controlVenta = new Ctrl_RegistrarVenta();

        String fechaActual = "";
        Date date = new Date();
        fechaActual = new SimpleDateFormat("yyyy/MM/dd").format(date);

        if (!BoxCliente.getSelectedItem().equals("Seleccione Cliente:")) {
            if (listaProductos.size() > 0) {
                //Metodo para obtener el id del cliente
                this.ObtenerIdCliente();
                //Registrar Cabecera
                cabeceraVenta.setIdCabeceraventa(0);
                cabeceraVenta.setIdCliente(idCliente);
                cabeceraVenta.setValorPagar(Double.parseDouble(txtTotalPagar.getText()));
                cabeceraVenta.setFechaVenta(fechaActual);
                cabeceraVenta.setEstado(1);

                if (controlVenta.guardar(cabeceraVenta)) {
                    JOptionPane.showMessageDialog(null, "Venta Registrada");
                    //Generar la factura
                    VentaPDF pdf = new VentaPDF();
                    pdf.DatosCliente(idCliente);
                    pdf.generarFacturaPDF();
                    //Guardar Detalle
                    for (DetalleVenta elemento : listaProductos) {
                        detalleventa.setIdDetalleVenta(0);
                        detalleventa.setIdCabeceraVenta(0);
                        detalleventa.setIdProducto(elemento.getIdProducto());
                        detalleventa.setCantidad(elemento.getCantidad());
                        detalleventa.setPrecioUnitario(elemento.getPrecioUnitario());
                        detalleventa.setSubTotal(elemento.getSubTotal());
                        detalleventa.setDescuento(elemento.getDescuento());
                        detalleventa.setIva(elemento.getIva());
                        detalleventa.setTotalPagar(elemento.getTotalPagar());
                        detalleventa.setEstado(1);

                        if (controlVenta.guardarDetalle(detalleventa)) {

                            txtSubTotal.setText("0.0");
                            txtIva.setText("0.0");
                            txtDescuento.setText("0.0");
                            txtTotalPagar.setText("0.0");
                            txtEfectivo.setText("");
                            txtCambio.setText("0.0");
                            auxIdDetalle = 1;
                            this.CargarClientes();
                            this.RestarStock(elemento.getIdProducto(), elemento.getCantidad());
                        } else {
                            JOptionPane.showMessageDialog(null, "Error al guardar detalle de venta");
                        }
                    }

                    //Vaciar la lista
                    listaProductos.clear();
                    listaTablaProductos();

                } else {
                    JOptionPane.showMessageDialog(null, "Error al guardar cabecera de venta");
                }

            } else {
                JOptionPane.showMessageDialog(null, "Seleccione un producto");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione un cliente");
        }
    }//GEN-LAST:event_btnRegistrarVentaActionPerformed

    private void btnBuscarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarClienteActionPerformed

        String clienteBuscar = txtClienteBuscar.getText().trim();
        Connection cn = Conexion.conectar();
        String sql = "select nombre,apellido from tb_cliente where cedula = '" + clienteBuscar + "'";
        Statement st;
        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);

            if (rs.next()) {
                BoxCliente.setSelectedItem(rs.getString("nombre") + " " + rs.getString("apellido"));
            } else {
                BoxCliente.setSelectedItem("Seleccione Cliente:");
                JOptionPane.showMessageDialog(null, "Cedula incorrecta o no registrada");
            }
            txtClienteBuscar.setText("");
            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al buscar cliente, " + e);
        }
    }//GEN-LAST:event_btnBuscarClienteActionPerformed

    private void btnAñadirProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAñadirProductoActionPerformed
        String combo = this.BoxProducto.getSelectedItem().toString();
        //Validar seleccion producto
        if (combo.equalsIgnoreCase("Seleccione Producto:")) {
            JOptionPane.showMessageDialog(null, "Seleccione un producto");
        } else {
            //Validar ingreso de la cantidad
            if (!txtCantidad.getText().isEmpty()) {
                //Validar que no ingrese caracteres no numericos
                boolean validacion = validar(txtCantidad.getText());
                if (validacion == true) {
                    //Validar cantidad > 0
                    if (Integer.parseInt(txtCantidad.getText()) > 0) {
                        cantidad = Integer.parseInt(txtCantidad.getText());
                        //Ejecutar metodo obtener datos del producto
                        this.DatosProducto();
                        //Validar que la cantidad del producto seleccionado no sea mayor al stock
                        if (cantidad <= cantidadProducto) {
                            subtotal = precioUnitario * cantidad;
                            totalPagar = subtotal + iva + descuento;
                            //Redondear
                            subtotal = (double) Math.round(subtotal * 100) / 100;
                            iva = (double) Math.round(iva * 100) / 100;
                            descuento = (double) Math.round(descuento * 100) / 100;
                            totalPagar = (double) Math.round(totalPagar * 100) / 100;

                            //Se crea nuevo producto
                            producto = new DetalleVenta(auxIdDetalle, //ID del detalle
                                    1, //ID Cabecera
                                    idProducto,
                                    nombre,
                                    Integer.parseInt(txtCantidad.getText()),
                                    precioUnitario,
                                    subtotal,
                                    descuento,
                                    iva,
                                    totalPagar,
                                    1 //Estado
                            );

                            //Añadir producto a la lista
                            listaProductos.add(producto);
                            JOptionPane.showMessageDialog(null, "Producto Agregado");
                            auxIdDetalle++;
                            txtCantidad.setText("");//Limpiar el campo
                            //Volver a cargar combo de los productos
                            this.CargarProductos();
                            this.CalcularTotalPagar();
                            txtEfectivo.setEnabled(true);
                            btnCalcular.setEnabled(true);

                        } else {
                            JOptionPane.showMessageDialog(null, "La cantidad supera el stock");
                        }

                    } else {
                        JOptionPane.showMessageDialog(null, "La cantidad debe ser mayor a 0");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "La cantidad no permite caracteres no numericos");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Ingrese la cantidad");
            }

        }
        //Llamar al metodo
        this.listaTablaProductos();

    }//GEN-LAST:event_btnAñadirProductoActionPerformed

    private void btnCalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcularActionPerformed
        if (!txtEfectivo.getText().isEmpty()) {
            //Validacion
            boolean validacion = validarDouble(txtEfectivo.getText());
            if (validacion == true) {
                //Validar que el efectivo sea mayor
                double efec = Double.parseDouble(txtEfectivo.getText().trim());
                double top = Double.parseDouble(txtTotalPagar.getText().trim());

                if (efec < top) {
                    JOptionPane.showMessageDialog(null, "El dinero en efectivo es insuficiente");
                } else {
                    double cambio = (efec - top);
                    double cambi = (double) Math.round(cambio * 100d) / 100;
                    String camb = String.valueOf(cambi);
                    txtCambio.setText(camb);

                }
            } else {
                JOptionPane.showMessageDialog(null, "No se admiten caracteres no numericos");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Ingrese dinero en efectivo para realizar el calculo");
        }
    }//GEN-LAST:event_btnCalcularActionPerformed
    int idArrayList = 0;

    private void tableProductosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableProductosMouseClicked
        int fila_point = tableProductos.rowAtPoint(evt.getPoint());
        int columna_point = 0;

        if (fila_point > -1) {
            idArrayList = (int) modeloDatosProductos.getValueAt(fila_point, columna_point);
        }

        int opcion = JOptionPane.showConfirmDialog(null, "¿Desea Eliminar Producto?");
        //Opciones confirmar - (Si = 0; No = 1; Cancel = 2; Close = -1)
        switch (opcion) {
            case 0: //Si
                listaProductos.remove(idArrayList - 1);
                this.CalcularTotalPagar();
                this.listaTablaProductos();
                break;
            case 1: // No
                break;

            default: //En caso de presionar cancel o close
                break;
        }
    }//GEN-LAST:event_tableProductosMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> BoxCliente;
    private javax.swing.JComboBox<String> BoxProducto;
    private javax.swing.JLabel Label_wallpaper;
    private javax.swing.JButton btnAñadirProducto;
    private javax.swing.JButton btnBuscarCliente;
    private javax.swing.JButton btnCalcular;
    private javax.swing.JButton btnRegistrarVenta;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    public static javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable tableProductos;
    private javax.swing.JTextField txtCambio;
    private javax.swing.JTextField txtCantidad;
    private javax.swing.JTextField txtClienteBuscar;
    private javax.swing.JTextField txtDescuento;
    private javax.swing.JTextField txtEfectivo;
    private javax.swing.JTextField txtIva;
    private javax.swing.JTextField txtSubTotal;
    public static javax.swing.JTextField txtTotalPagar;
    // End of variables declaration//GEN-END:variables

    //Metodo Cargar Clientes
    private void CargarClientes() {

        Connection cn = Conexion.conectar();
        String sql = "select * from tb_cliente";
        Statement st;

        try {

            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);

            BoxCliente.removeAllItems();
            BoxCliente.addItem("Seleccione Cliente:");
            while (rs.next()) {
                BoxCliente.addItem(rs.getString("nombre") + " " + rs.getString("apellido"));
            }
            cn.close();

        } catch (SQLException e) {
            System.out.println("Error al cagar clientes, " + e);
        }

    }

    //Metodo para cargar productos
    private void CargarProductos() {
        Connection cn = Conexion.conectar();
        String sql = "select * from tb_producto";
        Statement st;

        try {

            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);

            BoxProducto.removeAllItems();
            BoxProducto.addItem("Seleccione Producto:");
            while (rs.next()) {
                BoxProducto.addItem(rs.getString("nombre"));
            }
            cn.close();

        } catch (SQLException e) {
            System.out.println("Error al cagar productos, " + e);
        }
    }

    //Metodo validacion caracteres no numericos
    private boolean validar(String valor) {
        try {
            int num = Integer.parseInt(valor);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    //Metodo validacion caracteres no numericos
    private boolean validarDouble(String valor) {
        try {
            double num = Double.parseDouble(valor);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    //Metodo mostrar datos del producto
    private void DatosProducto() {
        try {
            String sql = "select * from tb_producto where nombre = '" + this.BoxProducto.getSelectedItem() + "'";
            Connection cn = Conexion.conectar();
            Statement st;
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                idProducto = rs.getInt("idProducto");
                nombre = rs.getString("nombre");
                cantidadProducto = rs.getInt("cantidad");
                precioUnitario = rs.getDouble("precio");
                porcentajeIva = rs.getInt("porcentajeIva");
                this.calcularIva(precioUnitario, porcentajeIva); //Calcula y retorna el iva 
            }
        } catch (SQLException e) {
            System.out.println("Error al obtener datos del producto, " + e);
        }
    }

    //Metodo para calcular el iva
    private double calcularIva(double precio, int porcentajeIva) {
        int p_iva = porcentajeIva;
        switch (p_iva) {
            case 0:
                iva = 0.0;
                break;
            case 19:
                iva = (precio * cantidad) * 0.19;
                break;

            case 5:
                iva = (precio * cantidad) * 0.05;
                break;

            default:
                break;
        }

        return iva;
    }

    //Metodo calculos del total a pagar
    private void CalcularTotalPagar() {
        subtotalGeneral = 0;
        descuentoGeneral = 0;
        ivaGeneral = 0;
        totalpagarGeneral = 0;

        for (DetalleVenta elemento : listaProductos) {
            subtotalGeneral += elemento.getSubTotal();
            descuentoGeneral += elemento.getDescuento();
            ivaGeneral += elemento.getIva();
            totalpagarGeneral += elemento.getTotalPagar();
        }
        //Redondear
        subtotalGeneral = (double) Math.round(subtotalGeneral * 100) / 100;
        ivaGeneral = (double) Math.round(ivaGeneral * 100) / 100;
        descuentoGeneral = (double) Math.round(descuentoGeneral * 100) / 100;
        totalpagarGeneral = (double) Math.round(totalpagarGeneral * 100) / 100;

        //Enviar datos a la vista
        txtSubTotal.setText(String.valueOf(subtotalGeneral));
        txtIva.setText(String.valueOf(ivaGeneral));
        txtDescuento.setText(String.valueOf(descuentoGeneral));
        txtTotalPagar.setText(String.valueOf(totalpagarGeneral));
    }

    //Metodo obtener id cliente
    private void ObtenerIdCliente() {
        try {
            String sql = "select * from tb_cliente where concat(nombre, ' ', apellido) = '" + this.BoxCliente.getSelectedItem() + "'";
            Connection cn = Conexion.conectar();
            Statement st;
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                idCliente = rs.getInt("idCliente");
            }

        } catch (SQLException e) {
            System.out.println("Error al obtener el id del cliente: " + e);
        }
    }

    //Metodo restar cantidad (stock)
    private void RestarStock(int idProducto, int cantidad) {
        int cantidadProductosBD = 0;
        try {
            Connection cn = Conexion.conectar();
            String sql = "select idProducto, cantidad from tb_producto where idProducto =  '" + idProducto + "'";
            Statement st;
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                cantidadProductosBD = rs.getInt("cantidad");
            }
            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al restar stock 1: " + e);
        }

        try {
            Connection cn = Conexion.conectar();
            PreparedStatement consulta = cn.prepareStatement("update tb_producto set cantidad = ? where idProducto = '" + idProducto + "'");
            int cantidadNueva = cantidadProductosBD - cantidad;
            consulta.setInt(1, cantidadNueva);
            if (consulta.executeUpdate() > 0) {
                System.out.println("Todo esta correcto");
            }
            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al restar stock 2: " + e);
        }
    }
}
